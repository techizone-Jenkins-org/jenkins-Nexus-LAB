pipeline {
    agent any // Or a specific agent: agent { label 'your-build-node' }

    tools {
        // Configure your Maven installation name in Jenkins (Manage Jenkins -> Tools)
        maven 'Maven 3.8.6' // Replace with the name you configured, e.g., 'M3', 'Maven_Home'
    }

    environment {
        // Define your Nexus repository IDs and URL here
        NEXUS_RELEASE_REPO_ID = 'nexus-releases' // Must match <id> in pom.xml's <repository>
        NEXUS_SNAPSHOT_REPO_ID = 'nexus-snapshots' // Must match <id> in pom.xml's <snapshotRepository>
        NEXUS_PUBLIC_REPO_URL = 'http://your-nexus-server:8081/repository/maven-public/' // Your public group URL for mirrors
    }

    stages {
        stage('Checkout') {
            steps {
                // Replace with your SCM details (e.g., Git)
                git branch: 'main', url: 'https://github.com/your-org/your-maven-repo.git'
            }
        }

        stage('Build and Deploy to Nexus') {
            steps {
                // The 'withMaven' step securely manages Maven settings.xml and credentials.
                // 'nexus-credentials-id' should be the ID of a 'Username with password' credential in Jenkins.
                withCredentials([usernamePassword(credentialsId: 'nexus-credentials-id', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                    withMaven(
                        // Maven tool name as configured in Jenkins (Manage Jenkins -> Tools)
                        maven: 'Maven 3.8.6',
                        // Credentials for Nexus (matching server IDs in settings.xml)
                        // These IDs (nexus-releases, nexus-snapshots) must also match the <id> in your pom.xml's distributionManagement
                        jdk: 'JDK 11', // Optional: specify JDK if needed
                        options: [
                            // Define a mirror for all repositories pointing to Nexus
                            // This ensures all dependencies are fetched via Nexus
                            mirrorOf(id: 'nexus', url: "${NEXUS_PUBLIC_REPO_URL}", mirrorOf: '*'),
                            // Define servers with credentials, matching the IDs from pom.xml's distributionManagement
                            server(id: "${NEXUS_RELEASE_REPO_ID}", username: "${NEXUS_USERNAME}", password: "${NEXUS_PASSWORD}"),
                            server(id: "${NEXUS_SNAPSHOT_REPO_ID}", username: "${NEXUS_USERNAME}", password: "${NEXUS_PASSWORD}")
                        ]
                    ) {
                        // Maven goals to clean, compile, package, and then deploy to Nexus
                        // '-DskipTests' is often used if tests are run in a separate stage or not required for deployment
                        sh 'mvn clean deploy -DskipTests'
                    }
                }
            }
        }
    }

    post {
        always {
            // Optional: Archive any build artifacts
            archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
        }
        success {
            echo 'Maven build and deployment to Nexus successful!'
        }
        failure {
            echo 'Maven build or deployment to Nexus failed. Check logs.'
        }
    }
}
