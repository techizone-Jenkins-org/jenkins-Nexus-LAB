pipeline {
    agent any

    environment {
        // Define Nexus details
        NEXUS_URL = 'http://your-nexus-server:8081' // Base URL of your Nexus instance
        NEXUS_REPOSITORY = 'maven-releases' // Or 'maven-snapshots', 'raw', 'npm-hosted', etc.
        // ID of the artifact you want to upload (e.g., from your project's build)
        ARTIFACT_ID = 'my-web-app'
        GROUP_ID = 'com.example.yourproject'
        ARTIFACT_VERSION = '1.0.0' // Or use env.BUILD_NUMBER or read from a file
        ARTIFACT_TYPE = 'war' // e.g., 'jar', 'zip', 'tar.gz'
        ARTIFACT_FILE = 'target/my-web-app.war' // Path to the artifact within your workspace
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/your-org/your-repo.git'
            }
        }

        stage('Build Artifact') {
            steps {
                // Example: Build a WAR file (replace with your build command for any artifact type)
                sh 'mvn clean package -DskipTests' // Assuming a Maven build creates the .war
                // For Node.js: sh 'npm install && npm run build'
            }
        }

        stage('Upload Artifact to Nexus (using nexusArtifactUploader)') {
            steps {
                script {
                    // Check if the artifact file exists before attempting to upload
                    if (fileExists(env.ARTIFACT_FILE)) {
                        nexusArtifactUploader(
                            nexusVersion: 'nexus3', // Or 'nexus2' if you use Nexus 2
                            protocol: 'http', // Or 'https'
                            nexusUrl: env.NEXUS_URL,
                            groupId: env.GROUP_ID,
                            artifactId: env.ARTIFACT_ID,
                            version: env.ARTIFACT_VERSION,
                            repository: env.NEXUS_REPOSITORY,
                            credentialsId: 'nexus-credentials-id', // ID of your Jenkins 'Username with password' credential
                            artifacts: [
                                [
                                    artifactId: env.ARTIFACT_ID,
                                    classifier: '', // Leave empty if no classifier
                                    file: env.ARTIFACT_FILE,
                                    type: env.ARTIFACT_TYPE
                                ]
                            ]
                        )
                    } else {
                        error "Artifact file not found: ${env.ARTIFACT_FILE}. Build might have failed or path is incorrect."
                    }
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: env.ARTIFACT_FILE // Archive the uploaded artifact
        }
    }
}
